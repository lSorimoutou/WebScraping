{"version":3,"sources":["Components/card-produit.components/card-produit.components.jsx","Components/produits.components/produits.components.jsx","Pages/HomePage.jsx","Components/searchAppbar.components/searchAppbar.jsx","socket.js","Pages/CRPage.jsx","App.js","serviceWorker.js","index.js","Pages/img/Figure.PNG","Pages/img/Activity diagram 1.png"],"names":["useStyles","makeStyles","theme","card","maxWidth","media","margin","height","width","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","RecipeReviewCard","props","classes","React","useState","expanded","setExpanded","Card","className","CardHeader","title","name","subheader","info","weight","CardMedia","image","url","CardContent","Typography","variant","color","component","align","price","CardActions","disableSpacing","IconButton","clsx","onClick","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","paragraph","desc","ingredients","infoNutri","Produits","items","data","taille","length","Grid","container","spacing","direction","justify","alignItems","map","item","index","xs","sm","key","HomePage","this","loading","CircularProgress","disableShrink","Component","root","flexGrow","marginBottom","menuButton","marginRight","display","breakpoints","up","appBar","zIndex","drawer","search","position","borderRadius","shape","fade","palette","common","white","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","padding","githubIcon","style","background","SearchAppBar","AppBar","Toolbar","noWrap","ListItemText","inset","to","Button","InputBase","placeholder","input","inputProps","onChange","value","onKeyPress","event","href","children","AppConfig","PROTOCOL","HOST","PORT","OTHER","Singleton","instance","getInstance","WebSocket","endInstance","close","flexShrink","drawerPaper","content","toolbar","mixins","CRPage","CssBaseline","Drawer","paper","List","text","spy","smooth","offset","ListItem","button","primary","Divider","Container","id","src","Diag","alt","language","tomorrow","showLineNumbers","Figure","App","handleChange","preventDefault","target","setState","clickSubmit","produit","state","service","onmessage","alert","JSON","parse","onopen","console","log","send","toLowerCase","onclose","code","onerror","window","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+cAgBMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,KAEdC,MAAO,CACHC,OAAQ,OACRC,OAAQ,QACRC,MAAO,SAEXC,OAAQ,CACJC,UAAW,eACXC,WAAY,OACZC,WAAYV,EAAMW,YAAYC,OAAO,YAAa,CAC9CC,SAAUb,EAAMW,YAAYE,SAASC,YAG7CC,WAAY,CACRP,UAAW,kBAEfQ,OAAQ,CACJC,gBAAiBC,IAAI,UAMd,SAASC,EAAiBC,GACrC,IAAMC,EAAUvB,IAD4B,EAEZwB,IAAMC,UAAS,GAFH,mBAErCC,EAFqC,KAE3BC,EAF2B,KAQ5C,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAWN,EAAQpB,MACrB,kBAAC2B,EAAA,EAAD,CACIC,MAAOT,EAAMU,KACbC,UAAWX,EAAMY,KAAO,IAAMZ,EAAMa,SAExC,kBAACC,EAAA,EAAD,CACIP,UAAWN,EAAQlB,MACnBgC,MAAOf,EAAMgB,IACbP,MAAOT,EAAMU,OAEjB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,QAAQC,UAAU,IAAIC,MAAM,UACtDtB,EAAMuB,MAAQ,WAIvB,kBAACC,EAAA,EAAD,CAAaC,gBAAc,GACvB,kBAACC,EAAA,EAAD,CACInB,UAAWoB,YAAK1B,EAAQd,OAAT,eACVc,EAAQN,WAAaS,IAE1BwB,QA1BU,WACtBvB,GAAaD,IA0BDyB,gBAAezB,EACf0B,aAAW,aAEX,kBAAC,IAAD,QAGR,kBAACC,EAAA,EAAD,CAAUC,GAAI5B,EAAU6B,QAAQ,OAAOC,eAAa,GAChD,kBAACjB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,eACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,IAAIgB,UAAU,QAAQnC,EAAMoC,MAChD,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,MAApB,kBACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,IAAIgB,UAAU,QAAQnC,EAAMqC,aAChD,kBAACnB,EAAA,EAAD,CAAYC,QAAQ,MAApB,gCACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,IAAIgB,UAAU,QAAQnC,EAAMsC,cC/ErD,SAASC,EAASvC,GAE7B,IAAMwC,EAAQxC,EAAMyC,KACdC,EAASF,EAAMG,OACrB,OACI,6BACsB,IAAjBH,EAAMG,OAAe,uBAAGpC,UAAU,UAAUmC,EAAvB,cAA+C,GACrE,kBAACE,EAAA,EAAD,CAAMC,WAAS,EACXC,QAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAGPT,EAAMU,KAAI,SAACC,EAAMC,GAAP,OAAkB,kBAACR,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,EAAGC,GAAI,EAAGC,IAAKH,GAAQ,kBAACrD,EAAD,iBAAsBoD,EAAtB,CAA4BI,IAAKH,W,ICdlGI,E,iLAIb,OACI,yBAAKjD,UAAU,WAEFkD,KAAKzD,MAAM0D,QACR,kBAACd,EAAA,EAAD,CACIC,WAAS,EACTE,UAAU,MACVC,QAAQ,SACRC,WAAW,UAEX,kBAACL,EAAA,EAAD,CAAMO,MAAI,GAAE,kBAACQ,EAAA,EAAD,CAAkBC,eAAa,MAG/C,kBAACrB,EAAD,CAAUE,KAAMgB,KAAKzD,MAAMyC,Y,GAjBjBvC,IAAM2D,W,uFCWtCnF,G,OAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCkF,KAAM,CACFC,SAAU,EACVC,aAAcpF,EAAMkE,QAAQ,IAEhCmB,WAAY,CACRC,YAAatF,EAAMkE,QAAQ,IAG/BrC,MAAM,aACFsD,SAAU,EACVI,QAAS,QACRvF,EAAMwF,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,UAGjBG,OAAQ,CACJC,OAAQ3F,EAAM2F,OAAOC,OAAS,GAElCC,OAAO,aACHC,SAAU,WACVC,aAAc/F,EAAMgG,MAAMD,aAC1B9E,gBAAiBgF,YAAKjG,EAAMkG,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACPnF,gBAAiBgF,YAAKjG,EAAMkG,QAAQC,OAAOC,MAAO,MAEtD3F,WAAY,EACZH,MAAO,QACNN,EAAMwF,YAAYC,GAAG,MAAQ,CAC1BhF,WAAYT,EAAMkE,QAAQ,GAC1B5D,MAAO,SAGf+F,WAAY,CACR/F,MAAON,EAAMkE,QAAQ,GACrB7D,OAAQ,OACRyF,SAAU,WACVQ,cAAe,OACff,QAAS,OACTlB,WAAY,SACZkC,eAAgB,UAEpBC,UAAW,CACPhE,MAAO,WAEXiE,WAAW,aACPC,QAAS1G,EAAMkE,QAAQ,EAAG,EAAG,EAAG,GAChCxD,WAAYV,EAAMW,YAAYC,OAAO,SACrCN,MAAO,QACNN,EAAMwF,YAAYC,GAAG,MAAQ,CAC1BnF,MAAO,IACP,UAAW,CACPA,MAAO,OAInBqG,WAAa,CACTD,QAAU1G,EAAMkE,QAAQ,EAAE,SAK5B0C,EAAQ,CACVC,WAAY,WAID,SAASC,EAAa1F,GACjC,IAAMC,EAAUvB,IAEhB,OACI,yBAAK6B,UAAWN,EAAQ6D,MACpB,kBAAC6B,EAAA,EAAD,CAAQH,MAAOA,EAAOd,SAAS,QAAQnE,UAAWN,EAAQqE,QACtD,kBAACsB,EAAA,EAAD,KACI,kBAAC1E,EAAA,EAAD,CAAYX,UAAWN,EAAQQ,MAAOU,QAAQ,KAAK0E,QAAM,GACpD7F,EAAMS,OAEX,kBAACqF,EAAA,EAAD,CAAcC,OAAK,GACf,kBAAC,IAAD,CAAOC,GAAG,KAAI,kBAACC,EAAA,EAAD,CAAQ7E,MAAM,WAAd,YACd,kBAAC,IAAD,CAAM4E,GAAG,OAAM,kBAACC,EAAA,EAAD,CAAQ7E,MAAM,WAAd,kBAEnB,kBAAC0E,EAAA,EAAD,CAAcC,OAAK,GACf,yBAAKxF,UAAWN,EAAQwE,QACpB,yBAAKlE,UAAWN,EAAQgF,YACpB,kBAAC,IAAD,OAEJ,kBAACiB,EAAA,EAAD,CACIC,YAAanG,EAAMmG,YACnBlG,QAAS,CACL6D,KAAM7D,EAAQmF,UACdgB,MAAOnG,EAAQoF,YAEnBgB,WAAY,CAAE,aAAc,UAC5BC,SAAUtG,EAAMsG,SAChBC,MAAOvG,EAAMuG,MACb7F,KAAMV,EAAMU,KACZ8F,WAAY,SAAAC,GACU,UAAdA,EAAMlD,KACNvD,EAAM4B,eAM1B,kBAACkE,EAAA,EAAD,CAAcC,OAAK,GACf,uBAAGW,KAAK,8CACJ,kBAACT,EAAA,EAAD,CAAQ7E,MAAM,WAAd,UACW,kBAAC,IAAD,CAAYb,UAAWN,EAAQsF,kBAOzDvF,EAAM2G,UCnInB,IAAMC,EAAY,CAChBC,SAAU,OAEVC,KAAM,0BACNC,KAAM,QACNC,MAAO,8CAwBMC,EArBI,WACf,IAAIC,EAOJ,MAAO,CACHC,YAAa,WAET,OADAD,EANW,IAAIE,UAAUR,EAAUC,SAAWD,EAAUE,KAAOF,EAAUG,KAAOH,EAAUI,QAS9FK,YAAc,WACNH,GACAA,EAASI,UAfN,G,4HCab5I,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCkF,KAAM,CACFK,QAAS,QAEbG,OAAQ,CACJC,OAAQ3F,EAAM2F,OAAOC,OAAS,GAElCA,OAAQ,CACJtF,MAVY,IAWZqI,WAAY,GAEhBC,YAAa,CACTtI,MAdY,KAgBhBuI,QAAS,CACL1D,SAAU,EACVuB,QAAS1G,EAAMkE,QAAQ,IAE3B4E,QAAS9I,EAAM+I,OAAOD,YAGX,SAASE,KACpB,IAAM3H,EAAUvB,KAOhB,OACI,yBAAK6B,UAAWN,EAAQ6D,MACpB,kBAAC+D,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CACIvH,UAAWN,EAAQuE,OACnBrD,QAAQ,YACRlB,QAAS,CACL8H,MAAO9H,EAAQuH,cAGnB,yBAAKjH,UAAWN,EAAQyH,UACxB,kBAACM,GAAA,EAAD,KACK,CAAC,eAAgB,oDAAgD,+BAA2B,uCAA+B,eAAe9E,KAAI,SAAC+E,EAAM7E,GAAP,OAC3I,kBAAC,QAAD,CACI4C,GAAE,UAAK5C,GACP8E,KAAK,EACLC,QAAQ,EACRC,QAAS,GACT3I,SAAU,IACVc,UAAU,eAEV,kBAAC8H,GAAA,EAAD,CAAUC,QAAM,EAAC/E,IAAK0E,GAClB,kBAACnC,EAAA,EAAD,CAAcyC,QAASN,UAKvC,kBAACO,GAAA,EAAD,OAEJ,0BAAMjI,UAAWN,EAAQwH,SACrB,yBAAKlH,UAAU,UACX,kBAACkI,EAAA,EAAD,CAAW3J,SAAS,MAChB,wBAAIyB,UAAU,SAAd,gBACA,0BAAMA,UAAU,YAAhB,8CAGR,yBAAKA,UAAU,QACX,kBAACkI,EAAA,EAAD,CAAW3J,SAAS,MAChB,6BAAS4J,GAAG,KACR,4CACA,kEACqC,mEADrC,kMAI4C,4CAJ5C,KAMA,8BAEJ,6BAASA,GAAG,KACR,kFACA,2KAEmC,6DAFnC,0CAGqC,wCAHrC,mFAMA,2NAKA,iEACoC,kDADpC,0KAGgE,wCAHhE,qKAOA,0BAAMnI,UAAU,eAAhB,gDACA,yBAAKoI,IAAKC,KAAMC,IAAI,2CAAwCtI,UAAU,SACtE,8BAEJ,6BAASmI,GAAG,KACR,6DACA,ibAMA,4CACA,wCACA,sZAMA,yEACA,kBAAC9F,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,GACX,sNAIA,2BACI,6CADJ,4IACwJ,6BAAM,6BAC1J,sDAFJ,kIAIA,4BACI,wEACA,iHAEJ,4DAC6B,UAD7B,+OAIA,iNAIJ,kBAACT,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CAAmByF,SAAS,MAAMtD,MAAOuD,IAAUC,iBAAe,GAAlE,8PAGA,kBAAC,IAAD,CAAmBF,SAAS,OAAOtD,MAAOuD,IAAUC,iBAAe,GAzHrF,+HA8HU,qDACA,yPAMA,+DACA,0MAGA,0BAAMzI,UAAU,eAAhB,mDACA,yBAAKoI,IAAKM,KAAQ1I,UAAU,SAASsI,IAAI,oDACzC,2BACI,iEADJ,4KAGwB,0DAHxB,wIAMA,8CACA,2BACI,+CADJ,4PAKA,4BACI,qFACA,2EACA,sIAEJ,uCACA,gTAMA,2CACA,4DACA,gIAEI,4CAFJ,2RAM4B,yCAN5B,iGAO4B,yEAP5B,2CASA,kBAACjG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,GACX,4XASJ,kBAACT,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CAAmByF,SAAS,OAAOtD,MAAOuD,IAAUC,iBAAe,GAAnE,gIAKR,2EACA,qkBAQA,wSAMA,kBAACpG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,GACX,0JAKJ,kBAACT,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CAAmByF,SAAS,OAAOtD,MAAOuD,IAAUC,iBAAe,GAAnE,2MAKR,oFACA,2eAMA,+gBAMI,4BACI,4BACI,8CACA,6FAEK,kBAAC,IAAD,CAAmBF,SAAS,KAAKtD,MAAOuD,IAAUC,iBAAe,GAAjE,8BAFL,mBAQJ,4BACI,gDACA,sFAIJ,4BACI,+CACA,2FAIJ,4BACI,iDACA,0HAMZ,uDACA,0XAMI,kBAAC,IAAD,CAAmBF,SAAS,OAAOtD,MAAOuD,IAAUC,iBAAe,GAAnE,s2BAwBJ,6DACA,yUAMA,kBAACpG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,GACX,8OAIA,4BACI,4BAAI,gCAAQ,uBAAGqD,KAAK,gHAAR,wBAAZ,uGACA,4BAAI,gCAAQ,uBAAGA,KAAK,kHAAR,0BAAZ,uGACA,4BAAI,gCAAQ,uBAAGA,KAAK,qGAAR,cAAZ,wGACA,4BAAI,gCAAQ,uBAAGA,KAAK,8GAAR,qBAAZ,0GAGR,kBAAC9D,EAAA,EAAD,CAAMO,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CAAmByF,SAAS,OAAOtD,MAAOuD,IAAUC,iBAAe,GAAnE,obAsBR,8BAEJ,6BAASN,GAAG,KACR,oEACA,gHAGA,4BACI,iDACA,mDACA,mDACA,qDACA,mDACA,6DAEJ,8BAEJ,6BAASA,GAAG,KACR,2CACA,yJACA,+EAGA,4BACI,yDAA8B,6BAA9B,IAAqC,uBAAGhC,KAAK,6DAAR,+DAEzC,wDAGA,4BACI,8DAAmC,6BAAnC,IAA0C,uBAAGA,KAAK,oDAAR,qDAC1C,0EAA+C,6BAA/C,IAAsD,uBAAGA,KAAK,4BAAR,6BACtD,0DAA+B,6BAA/B,IAAsC,uBAAGA,KAAK,+BAAR,gCACtC,mDAAwB,6BAAxB,IAA+B,uBAAGA,KAAK,yDAAR,0DAC/B,wDAA6B,6BAA7B,IAAoC,uBAAGA,KAAK,uEAAR,wEACpC,2EAAgD,6BAAhD,IAAuD,uBAAGA,KAAK,+EAAR,iFACvD,qEAA0C,6BAA1C,IAAiD,uBAAGA,KAAK,8FAAR,+FACjD,uDAA4B,6BAA5B,IAAmC,uBAAGA,KAAK,uFAAR,wFACnC,yDAA8B,6BAA9B,IAAqC,uBAAGA,KAAK,mDAAR,qDAEzC,kC,IC7UbwC,G,YAzEb,aAAe,IAAD,8BACZ,+CASFC,aAAe,SAAC1C,GACdA,EAAM2C,iBADkB,MAEA3C,EAAM4C,OAAtB3I,EAFgB,EAEhBA,KAAM6F,EAFU,EAEVA,MACd,EAAK+C,SAAL,eAAiB5I,EAAO6F,KAbZ,EAgBdgD,YAAc,WAAO,IAEXC,EAAY,EAAKC,MAAjBD,QACJE,EAAUzC,EAAUE,cACxB,EAAKmC,SAAS,CAAE5F,SAAS,IAEzBgG,EAAQC,UAAY,SAAClD,GACfA,EAAMhE,OACW,YAAfgE,EAAMhE,MACRmH,MAAM,2CACN,EAAKN,SAAS,CAAE5F,SAAS,MAGzB,EAAK4F,SAAS,CAAE7G,KAAMoH,KAAKC,MAAMrD,EAAMhE,QACvCiH,EAAQpC,QACR,EAAKgC,SAAS,CAAE5F,SAAS,OAM/BgG,EAAQK,OAAS,WACfC,QAAQC,IAAI,qBACZP,EAAQQ,KAAKV,EAAQW,gBAGvBT,EAAQU,QAAU,SAAC3D,GACjBuD,QAAQC,IAAI,sBAAwBxD,EAAM4D,OAG5CX,EAAQY,QAAU,WAChBC,OAAOX,MAAM,wBA5Cf,EAAKH,MAAQ,CACXD,QAAS,GACT/G,KAAM,GACNiB,SAAS,GANC,E,sEAmDL,IAAD,OACN,OACE,yBAAKnD,UAAU,OACb,kBAAC,IAAD,KACE,kBAACmF,EAAD,CACES,YAAY,iBACZG,SAAU7C,KAAK0F,aACf5C,MAAO9C,KAAK+F,QACZ9I,KAAK,UACLkB,QAAS6B,KAAK8F,YACd9I,MAAM,iBACR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+J,OAAK,EAACC,KAAK,IAAIpJ,UAAW,kBAAM,kBAAC,EAAD,CAAUoB,KAAM,EAAKgH,MAAMhH,KAAMiB,QAAS,EAAK+F,MAAM/F,aAC5F,kBAAC,IAAD,CAAO8G,OAAK,EAACC,KAAK,MAAMpJ,UAAc,kBAAM,kBAACuG,GAAD,gB,GAlEtC/D,aCFE6G,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,iD","file":"static/js/main.3b32ea3e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport clsx from 'clsx';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        margin: 'auto',\r\n        height: '170px',\r\n        width: '170px'\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function RecipeReviewCard(props) {\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card}> \r\n            <CardHeader\r\n                title={props.name}\r\n                subheader={props.info + \" \" + props.weight}\r\n            />\r\n            <CardMedia\r\n                className={classes.media}\r\n                image={props.url}\r\n                title={props.name}\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"h5\" color=\"error\" component=\"P\" align='center'>\r\n                    {props.price + \"€\"}\r\n                </Typography>\r\n            </CardContent>\r\n\r\n            <CardActions disableSpacing>\r\n                <IconButton\r\n                    className={clsx(classes.expand, {\r\n                        [classes.expandOpen]: expanded,\r\n                    })}\r\n                    onClick={handleExpandClick}\r\n                    aria-expanded={expanded}\r\n                    aria-label=\"show more\"\r\n                >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                <CardContent>\r\n                    <Typography variant=\"h6\">Description</Typography>\r\n                    <Typography variant=\"p\" paragraph='true'>{props.desc}</Typography>\r\n                    <Typography variant=\"h6\">Ingrédients</Typography>\r\n                    <Typography variant=\"p\" paragraph='true'>{props.ingredients}</Typography>\r\n                    <Typography variant=\"h6\">INFORMATIONS NUTRITIONNELLES</Typography>\r\n                    <Typography variant=\"p\" paragraph='true'>{props.infoNutri}</Typography>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport RecipeReviewCard from '../card-produit.components/card-produit.components';\r\n\r\n\r\n\r\nexport default function Produits(props) {\r\n\r\n    const items = props.data;\r\n    const taille = items.length;\r\n    return(\r\n        <div>\r\n           { items.length !== 0 ? <p className=\"taille\">{taille} Articles.</p> : \"\" }\r\n            <Grid container\r\n                spacing={6}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n            >\r\n            {\r\n                    items.map((item, index) => (<Grid item xs={6} sm={3} key={index} ><RecipeReviewCard {...item} key={index} /></Grid>))\r\n            }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport Produits from '../Components/produits.components/produits.components';\r\n\r\n\r\nexport default class HomePage extends React.Component{\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"content\">\r\n                    {\r\n                        (this.props.loading) ?\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item ><CircularProgress disableShrink /></Grid>\r\n                            </Grid>\r\n                            :\r\n                            <Produits data={this.props.data} />\r\n\r\n                    }    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Button from '@material-ui/core/Button';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\n\r\n\r\nimport './searchAppbar.scss';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginBottom: theme.spacing(4),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        \r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        width: theme.spacing(7),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 7),\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: 120,\r\n            '&:focus': {\r\n                width: 200,\r\n            },\r\n        },\r\n    },\r\n    githubIcon : {\r\n        padding : theme.spacing(1,2),\r\n\r\n    }\r\n}));\r\n\r\nconst style = {\r\n    background: '#20232A',\r\n};\r\n\r\n\r\nexport default function SearchAppBar(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar style={style} position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        {props.title}\r\n                    </Typography>\r\n                    <ListItemText inset>\r\n                        <Link  to=\"/\"><Button color=\"inherit\">ACCUEIL</Button></Link>\r\n                        <Link to=\"/CR\"><Button color=\"inherit\">COMPTE-RENDU</Button></Link>\r\n                    </ListItemText>\r\n                    <ListItemText inset>\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                <SearchIcon />\r\n                            </div>\r\n                            <InputBase\r\n                                placeholder={props.placeholder}\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{ 'aria-label': 'search' }}\r\n                                onChange={props.onChange}\r\n                                value={props.value}\r\n                                name={props.name}\r\n                                onKeyPress={event => {\r\n                                    if (event.key === 'Enter') {\r\n                                        props.onClick();\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </ListItemText>\r\n                    <ListItemText inset>\r\n                        <a href=\"https://github.com/lSorimoutou/WebScraping\">\r\n                            <Button color=\"inherit\">\r\n                                GITHUB <GitHubIcon className={classes.githubIcon} />\r\n                            </Button>\r\n                        </a>\r\n                    </ListItemText>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","\r\nconst AppConfig = {\r\n  PROTOCOL: \"wss:\",\r\n  // TODO: change to localhost if you wish to run it locally\r\n  HOST: \"//lsorimoutou.github.io\",\r\n  PORT: \":9000\",\r\n  OTHER: \"/LenaickSorimoutou/WebSockets_illustration\"\r\n};\r\n\r\nconst Singleton = (function () {\r\n    let instance;\r\n\r\n    function createInstance() {\r\n        const socket = new WebSocket(AppConfig.PROTOCOL + AppConfig.HOST + AppConfig.PORT + AppConfig.OTHER);\r\n        return socket;\r\n    }\r\n\r\n    return {\r\n        getInstance: function () {\r\n            instance = createInstance();\r\n            return instance;\r\n        },\r\n        endInstance : function(){\r\n            if (instance){\r\n                instance.close();\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nexport default Singleton;","import React from 'react';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Figure from \"./img/Figure.PNG\";\r\nimport Diag from './img/Activity diagram 1.png'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { Link } from \"react-scroll\";\r\n\r\nconst drawerWidth = 340;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(2),\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n}));\r\n\r\nexport default function CRPage() {\r\n    const classes = useStyles();\r\n    const codeHTML = `<body>\r\n    <noscript>You need to enable JavaScript to run this app.</noscript>\r\n    <div id=\"root\">\r\n    </div>\r\n</body>`\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.toolbar} />\r\n                <List>\r\n                    {['Introduction', 'I.FONCTIONNEMENT GLOBAL DE L’APPLICATION WEB', 'II.CHOIX MISE EN ŒUVRE ', 'III. LES DONNÉES RÉCUPÉRER ', 'IV. SOURCES'].map((text, index) => (\r\n                        <Link \r\n                            to={`${index}`} \r\n                            spy={true}\r\n                            smooth={true}\r\n                            offset={-70}\r\n                            duration={500}\r\n                            className=\"sideBarLink\"\r\n                        >\r\n                            <ListItem button key={text}>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        </Link>\r\n                    ))}\r\n                </List>\r\n                <Divider />\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className=\"header\">\r\n                    <Container maxWidth=\"lg\">\r\n                        <h2 className=\"title\">Compte-Rendu</h2>\r\n                        <span className=\"subTitle\">Sorimoutou Lénaïck L3 Informatique</span>\r\n                    </Container>\r\n                </div>\r\n                <div className=\"body\">\r\n                    <Container maxWidth=\"lg\">\r\n                        <section id=\"0\">\r\n                            <h3>Introduction</h3>\r\n                            <p>\r\n                                Le projet consistait à fabriquer <strong>une application de Web scraping</strong> sur\r\n                                un site de e-commerce afin de récupérer des informations sur des produits\r\n                                de consommation courante. Dans le cadre de mon projet,\r\n                                j’ai décidé de choisir le site marchand <strong>monoprix</strong>.\r\n                            </p>\r\n                            <hr />\r\n                        </section>\r\n                        <section id=\"1\">\r\n                            <h3>I.\tFONCTIONNEMENT GLOBAL DE L’APPLICATION WEB</h3>\r\n                            <p>\r\n                                La conception de l'application web a été réalisé avec deux langages de programmation.\r\n                                L'affichage a été réalisé avec <strong>HTML, SASS et JavaScript.</strong>\r\n                                Le Web Scraping est réalisé avec <strong>Java</strong>.\r\n                                La liaison entre les deux langages de programmation se fait via un WebSocket.\r\n                            </p>\r\n                            <p>\r\n                                Pour débuter la recherche de produit, on utilise la barre de recherche\r\n                                sur la page web. Après avoir validé la recherche, le nom du produit entré \r\n                                sera envoyé à l'api Java.\r\n                            </p>\r\n                            <p>\r\n                                Par le biais de la bibliothèque <strong>sélénium</strong>, on va extraire les données du site marchand\r\n                                monoprix. Java va ensuite crée un objet avec toutes\r\n                                les informations scraper, puis en utilisant la bibliothèque <strong>Gson</strong>, on convertit l'objet au\r\n                                format json et on l'envoie au client (JavaScript).\r\n                                Le diagramme d'activité suivant résume le fonctionnement de l'application web.\r\n                            </p>\r\n                            <span className=\"imgSubTitle\">Diagramme d'activité de l'application web</span>\r\n                            <img src={Diag} alt=\"Diagramme d'activité de l'application\" className=\"Diag\"/>\r\n                            <hr />\r\n                        </section>\r\n                        <section id=\"2\">\r\n                            <h3>II.\tCHOIX MISE EN ŒUVRE </h3>\r\n                            <p>\r\n                                Dans cette partie, nous allons détailler les choix mise en œuvre pour la conception de\r\n                                l’application web. Pour ce faire, la partie sera divisé en deux sous parties. La première\r\n                                détaillera les choix fait dans la partie Front-End(côté client avec Javascript) de l’application.\r\n                                La seconde partie détaillera les choix de la partie Back-End(côté serveur avec Java).\r\n                            </p>\r\n                            <h4>1. Front-End</h4>\r\n                            <h5>A. React</h5>\r\n                            <p>\r\n                                La partie front-end est réalisé avec la bibliothèque JavaScript React.\r\n                                Il s'agit d'une bibliothèque développée par Facebook afin de faciliter la création d'application\r\n                                web via la création de composant autonomes qui maintiennent leur propre état.\r\n                                J'ai choisi d'utiliser cette bibliothèque afin de facilité la conception de la partie front-end.\r\n                            </p>\r\n                            <h6>a) Fonctionnement de React dans le projet</h6>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={6}>\r\n                                    <p>\r\n                                        C’est dans le fichier index.js que React injecte le HTML (généré par React)\r\n                                        dans le fichier index.html à l’intérieur du div d’identifiant « root ».\r\n                                    </p>\r\n                                    <p>\r\n                                        <strong>react-dom</strong> : Module fournissant des méthodes spécifiques au DOM. En important ce module, on a accès à divers méthode comme render().<br /><br />\r\n                                        <strong>ReactDom.render() </strong> : Permet l’affichage d’un élément React au sein du nœud DOM. Cette méthode prend deux paramètres :\r\n                                    </p>\r\n                                    <ul>\r\n                                        <li>L’élément qui sera injecté</li>\r\n                                        <li>Un second élément où l’on va injecter le première élément</li>\r\n                                    </ul>\r\n                                    <p>\r\n                                        Ici nous avons spécifié {'<App />'}, comme élément a injecté et document.getElementById('root') comme second élément.\r\n                                        Si l’élément React était déjà affiché dans container, cette méthode effectuera une mise à jour du nœud.\r\n                                    </p>\r\n                                    <p>\r\n                                        Lors de la mise à jour, React DOM compare l’élément et ses enfants avec la version précédente, et applique uniquement les mises à jour DOM nécessaires.\r\n                                    </p>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <SyntaxHighlighter language=\"jsx\" style={tomorrow} showLineNumbers>\r\n                                        {`import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';import App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\nserviceWorker.unregister();`}\r\n                                    </SyntaxHighlighter>\r\n                                    <SyntaxHighlighter language=\"html\" style={tomorrow} showLineNumbers>\r\n                                        {codeHTML}\r\n                                    </SyntaxHighlighter>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <h6>b)\tUtilisation de JSX</h6>\r\n                            <p>\r\n                                Dans le projet, j’ai utilisé la syntaxe JSX\r\n                                afin de facilité mon utilisation de React. JSX est une\r\n                                extension syntaxique de JavaScript uniquement là pour\r\n                                faciliter l’expérience de développement.\r\n                            </p>\r\n                            <h6>c)\tHiérarchie des composants</h6>\r\n                            <p>\r\n                                Avec React, la page peut être subdivisé en plusieurs composants. Voici une représentation de la hiérarchie d’utilisation des composants de l'application :\r\n                            </p>\r\n                            <span className=\"imgSubTitle\">Hiérarchie d’utilisation des composants</span>\r\n                            <img src={Figure} className=\"figure\" alt=\"hiérarchie d’utilisation des composants\" />\r\n                            <p>\r\n                                <strong>App est la composante mère</strong>, c'est la composante qui sera injectée au sein du nœud DOM.\r\n                                À l'intérieur du composant, on retrouve HomePage, CRPage et SearchAppBar.\r\n                                SearchAppBar est la <strong>barre de l'application</strong> composée du nom de l'application, une barre de recherche et des\r\n                                buttons permettant la navigation entre les différentes pages.\r\n                            </p>\r\n                            <h5>B.\tMATERIAL UI</h5>\r\n                            <p>\r\n                                <strong>Material UI</strong> est un ensemble de composants React permettant le développement web rapide et simple.\r\n                                Avec Material UI, j'ai pu gérer la partie « design » de l'application web.\r\n                                Les principaux composants de Material UI utilisés dans le projet sont :\r\n                            </p>\r\n                            <ul>\r\n                                <li>Barre d'application avec champ de recherche principal</li>\r\n                                <li>Cartes (pour l’affichage des produits)</li>\r\n                                <li>Barre de chargement circulaire (pour indiquer à l'utilisateur que l'application traite sa demande)</li>\r\n                            </ul>\r\n                            <h5>C.\tSASS</h5>\r\n                            <p>\r\n                                Les feuilles de style sont générées dynamiquement avec le langage Sass. La syntaxe SCSS a\r\n                                été choisi, car elle est assez similaire au Css. J'ai choisi de faire mes feuilles de\r\n                                styles en Sass juste par pure curiosité pour ce langage qui fait parler de lui.\r\n                            </p>\r\n\r\n                            <h4>2. Back-End</h4>\r\n                            <h5>A.\tWEBSCRAPING AVEC SELENIUM</h5>\r\n                            <p>\r\n                                Le web Scraping est réalisé dans la partie Java par le biais de la bibliothèque Selenium.\r\n                                <strong>Selenium</strong> est un framework de test informatique développée\r\n                                en Java pour le test automatisé d'applications Web.\r\n                                Mais, nous pouvons aussi l'utiliser pour faire du Web Scraping.\r\n                                Effectivement, il est possible de rechercher assez facilement des éléments\r\n                                d'une page web avec son <strong>xpath</strong> (langage de requête pour localiser une portion d'un document XML)\r\n                                et il est aussi capable <strong>d'extraire les données stockées</strong> dans ces différents éléments.\r\n                            </p>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={6}>\r\n                                    <p>\r\n                                        Ici par exemple, on recherche un élément div possédant\r\n                                        la classe « catalog-page__statistic ». Ce div contient le\r\n                                        nombre de produit trouvé sur le site marchand.\r\n                                        Si ce nombre est égal à 0, pas besoin de faire de recherche,\r\n                                        on arrête le programme et on envoie un message au JavaScrpit\r\n                                        pour lui dire qu'on n'a rien trouvé.\r\n                                    </p>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <SyntaxHighlighter language=\"java\" style={tomorrow} showLineNumbers>\r\n                                        {`// search the number of goods\\nString nbArt = driver.findElement(By.cssSelector(\"div.catalog-page__statistic\")).getText();`}\r\n                                    </SyntaxHighlighter>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <h6>a)\tLe problème du « lazy-loading »</h6>\r\n                            <p>\r\n                                Le « lazy-loading »(“chargement fainéant” en français) consiste à spécifier quels composants d’un programme \r\n                                doivent être chargés lors du démarrage de celui-ci. \r\n                                Par défaut, quand on demande à un navigateur d'afficher une page web,\r\n                                cette dernière charge toutes les ressources et donc toutes les images.\r\n                                Ce n'est pas vraiment optimal, c'est pour cela qu'a été inventé le « lazy-loading ».\r\n                                L'image est chargée seulement quand elle est visible sur la page ou utiliser par l'utilisateur.\r\n                            </p>\r\n                            <p>\r\n                                Dans le cas du Web Scraping avec selenium, j'ai été confronté à ce problème.\r\n                                Quand je recherchais le lien de toutes les images de la page, je ne recevais\r\n                                que le lien des images en haut page.\r\n                                Les autres images n'avaient pas encore été chargé.\r\n                            </p>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={6}>\r\n                                    <p>\r\n                                        Pour régler ce problème, on réalise un scroll vers le\r\n                                        bas de page et on attend que les images soient chargées.\r\n                                    </p>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <SyntaxHighlighter language=\"java\" style={tomorrow} showLineNumbers>\r\n                                        {`Thread.sleep(1000);\\nfor (int i = 0; i < 3000; i = i + 500) {\\n  JavascriptExecutor jse = (JavascriptExecutor)driver;\\n  jse.executeScript(\"window.scrollTo(0,\" + i + \" )\");\\n\\n  Thread.sleep(1000);`}\r\n                                    </SyntaxHighlighter>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <h6>b) Diminué le temps d'éxécution de selenium</h6>\r\n                            <p>\r\n                                Selenium est à l'origine une bibliothèque de teste. Elle permet d'automatiser des tâches sur un browser. Elle possède\r\n                                cependant des méthodes permettant l'extraction de donnée sur certain site. À cause de certains problèmes\r\n                                comme le \"lazy-loading\" et la gestion de code par JavaScript, je fus obligé d'utiliser cette bibliothèque capable\r\n                                de gérer le Javascript de la page (contrairement à Jsoup que nous verrons plus tard).\r\n                            </p>\r\n                            <p>\r\n                                Selenium est très lent, il faut attendre dans la premier temps le chargement de la page à l'état \r\n                                \"complete\". Puis, il faut scroller la page vers le bas (pour résoudre le problème du \"lazy-loading\" des images). \r\n                                Il était donc important de trouver un moyen d'optimiser l'application. Pour rendre selenium plus rapide, \r\n                                commencé par utiliser des selecteurs rapide. En effet, selenium donne la possibilité d'utiliser différent \r\n                                type de selecteurs (trier par leur vitesse) :\r\n                                <ul>\r\n                                    <li>\r\n                                        <stong>ID selector</stong>\r\n                                        <p>\r\n                                            C'est le sélecteur le plus rapide de selenium, il utilise le \r\n                                             <SyntaxHighlighter language=\"js\" style={tomorrow} showLineNumbers>\r\n                                                {`document.getElementById() `}\r\n                                            </SyntaxHighlighter>\r\n                                            de JavaScript.\r\n                                        </p>\r\n                                    </li>\r\n                                    <li>\r\n                                        <stong>NAME selector</stong>\r\n                                        <p>\r\n                                           Il fonctionne si l'élément à un attribut NAME\r\n                                        </p>\r\n                                    </li>\r\n                                    <li>\r\n                                        <stong>Css selector</stong>\r\n                                        <p>\r\n                                            Selector le plus souvent utilisé dans l'application web. \r\n                                        </p>\r\n                                    </li>\r\n                                    <li>\r\n                                        <stong>XPATH selector</stong>\r\n                                        <p>\r\n                                            Le selecteur XPAH est le selecteur le plus simple a utilisé, mais aussi le plus lent. \r\n                                        </p>\r\n                                    </li>\r\n                                </ul>\r\n                            </p>\r\n                            <h5>B.\tUTILISATION DE JSOUP</h5>\r\n                            <p>\r\n                                Dans l'application, on utilise JSOUP afin d'aller chercher la description, les informations nutritionnels.\r\n                                Pour chaque produit qu'on trouve (avec selenium), on se rend sur la page du produit avec JSOUP pour prendre\r\n                                les informations dont nous avons besoin. \r\n\r\n                                On utilise plutôt JSOUP que selenium car sur cette page, on n'a pas besoin de JavaScript. \r\n                                <SyntaxHighlighter language=\"java\" style={tomorrow} showLineNumbers>\r\n                                    {`connection = Jsoup.connect(item.findElement(By.cssSelector(\"a.grocery-item__product-img\")).getAttribute(\"href\"));\r\n\r\n//set user agent \r\nconnection.userAgent(\"Mozilla/5.0\");\r\n\r\n // set timeout to 10 seconds\r\nconnection.timeout(10 * 1000);\r\n\r\n// get the HTML document\r\ndoc = connection.get();\r\n\r\nString desc = doc.selectFirst(\"div.product__description-details\").text();\r\nElement ingredientsEle = doc.selectFirst(\"div.product__ingredients-allergens-details\");\r\n                        Element infoNutriEle = doc.selectFirst(\".Nutrition-tixjv9-0\");\r\n\r\nString ingredients = ingredientsEle == null ? \"\" : ingredientsEle.text();\r\nString infoNutri = infoNutriEle == null ? \"\" : infoNutriEle.text();\r\n\r\nItem itemObject = new Item(itemName, info, itemPrice, itemWeight, imageUrl, desc, ingredients, \r\n                                infoNutri);\r\njsonInString.add(itemObject);`}\r\n                                </SyntaxHighlighter>\r\n                            </p>\r\n                            <h5>C.\tUTILISATION DE GSONBUILDER</h5>\r\n                            <p>\r\n                                Les données sont envoyées à JavaScript sous le format Json.\r\n                                Pour convertir un objet java au format JSON,\r\n                                j'ai utilisé la bibliothèque Gson. Gson est une bibliothèque open source développée\r\n                                par Google pour convertir un objet Java dans sa représentation JSON et vice versa.\r\n                            </p>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={6}>\r\n                                    <p>\r\n                                        Dans ce code, on vérifie dans un premier temps si le champs « _jsonInString » est null.\r\n                                        Si ce n’est pas le cas, on peut convertir la liste d’objet à l’intérieur en fichier json.\r\n                                    </p>\r\n                                    <ul>\r\n                                        <li><strong><a href=\"https://static.javadoc.io/com.google.code.gson/gson/2.7/com/google/gson/GsonBuilder.html#setPrettyPrinting--\">setPrettyPrinting()</a></strong> : Configure Gson pour sortir un fichier Json qui s'adapte à une page pour une jolie impression.</li>\r\n                                        <li><strong><a href=\"https://static.javadoc.io/com.google.code.gson/gson/2.7/com/google/gson/GsonBuilder.html#disableHtmlEscaping--\">disableHtmlEscaping()</a></strong> : Configure Gson pour sortir un fichier Json qui s'adapte à une page pour une jolie impression.</li>\r\n                                        <li><strong><a href=\"https://static.javadoc.io/com.google.code.gson/gson/2.7/com/google/gson/GsonBuilder.html#create--\">create() </a></strong>  : Configure Gson pour sortir un fichier Json qui s'adapte à une page pour une jolie impression.</li>\r\n                                        <li><strong><a href=\"https://static.javadoc.io/com.google.code.gson/gson/2.7/com/google/gson/Gson.html#toJson-java.lang.Object-\">toJson(Object O)</a></strong>  : Configure Gson pour sortir un fichier Json qui s'adapte à une page pour une jolie impression.</li>\r\n                                    </ul>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <SyntaxHighlighter language=\"java\" style={tomorrow} showLineNumbers>\r\n                                        {`/**\r\n* \r\n* @return a json file (String) or the string \"Nothing\"\r\n*/\r\npublic String getString(){\r\n    // Convert java Objets to Json \r\n    if(this._jsonInString != null){\r\n        final GsonBuilder builder = new GsonBuilder();\r\n        builder.setPrettyPrinting();\r\n        builder.disableHtmlEscaping();\r\n        return builder.create().toJson(this._jsonInString);\r\n    }\r\n    else {\r\n        return \"Nothing\";\r\n    }\r\n        \r\n}`}\r\n                                    </SyntaxHighlighter>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                            <hr />\r\n                        </section>\r\n                        <section id=\"3\">\r\n                            <h3>III.\tLES DONNÉES RÉCUPÉRER </h3>\r\n                            <p>\r\n                                Pour un produit donnée, les données récupérer par web scraping sont :\r\n                            </p>\r\n                            <ul>\r\n                                <li>Le nom du produit</li>\r\n                                <li>Le poids du produit</li>\r\n                                <li>La photo du produit</li>\r\n                                <li>La marque du produit </li>\r\n                                <li>Les ingrédients </li>\r\n                                <li>La valeur énergétique </li>\r\n                            </ul>\r\n                            <hr />\r\n                        </section>\r\n                        <section id=\"4\">\r\n                            <h3>IV.\tSOURCES</h3>\r\n                            <p>Les informations présentées peuvent être complétées par les références des sites internet qui suivent</p>\r\n                            <h5>\r\n                                FONCTIONNEMENT GLOBAL DE L’APPLICATION WEB\r\n                            </h5>\r\n                            <ul>\r\n                                <li>Modelio : Docs de Modelio <br /> <a href=\"https://www.modelio.org/documentation-menu/tutorials.html\">https://www.modelio.org/documentation-menu/tutorials.html</a></li>\r\n                            </ul>\r\n                            <h5>\r\n                                CHOIX MISE EN ŒUVRE\r\n                            </h5>\r\n                            <ul>\r\n                                <li>React : Documentation de React <br /> <a href=\"https://fr.reactjs.org/docs/getting-started.html\">https://fr.reactjs.org/docs/getting-started.html</a></li>\r\n                                <li>Material UI : Site officiel de Material UI <br /> <a href=\"https://material-ui.com/\">https://material-ui.com/</a></li>\r\n                                <li>SASS: Documentation de SASS<br /> <a href=\"https://sass-lang.com/guide\">https://sass-lang.com/guide</a></li>\r\n                                <li>Wikipedia : Selenium<br /> <a href=\"https://fr.wikipedia.org/wiki/Selenium_(informatique)\">https://fr.wikipedia.org/wiki/Selenium_(informatique)</a></li>\r\n                                <li>BDM : Lazy-loading natif <br /> <a href=\"https://www.blogdumoderateur.com/lazy-loading-chrome-firefox-natif/\">https://www.blogdumoderateur.com/lazy-loading-chrome-firefox-natif/</a></li>\r\n                                <li>1min30 : Lazy loading (informatique et web) <br /> <a href=\"https://www.1min30.com/dictionnaire-du-web/lazy-loading-informatique-et-web\">https://www.1min30.com/dictionnaire-du-web/lazy-loading-informatique-et-web/</a></li>\r\n                                <li>GsonBuilder : java doc de GsonBuilder <br /> <a href=\"https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/GsonBuilder.html\">https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/GsonBuilder.html</a></li>\r\n                                <li>Gson : java doc de Gson <br /> <a href=\"https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/Gson.html\">https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/Gson.html</a></li>\r\n                                <li>Jsoup : java doc de Jsoup <br /> <a href=\"https://jsoup.org/apidocs/overview-summary.html\">https://jsoup.org/apidocs/overview-summary.html</a></li>\r\n                            </ul>\r\n                            <hr />\r\n                        </section>\r\n\r\n                    </Container>\r\n                </div>\r\n            </main>\r\n                \r\n            </div>\r\n    )\r\n    \r\n}\r\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\n\nimport './App.scss';\n\nimport HomePage from './Pages/HomePage';\nimport SearchAppBar from './Components/searchAppbar.components/searchAppbar';\nimport Singleton from './socket';\nimport CRPage from './Pages/CRPage';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      produit: \"\",\n      data: [],\n      loading: false,\n    }\n  }\n\n  handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  clickSubmit = () => {\n\n    const { produit } = this.state;\n    let service = Singleton.getInstance();\n    this.setState({ loading: true });\n\n    service.onmessage = (event) => {\n      if (event.data) {\n        if (event.data === \"Nothing\") {\n          alert(\"Aucun produit n'a été trouvé !\");\n          this.setState({ loading: false });\n        }\n        else {\n          this.setState({ data: JSON.parse(event.data) });\n          service.close();\n          this.setState({ loading: false });\n        }\n\n      }\n    };\n\n    service.onopen = () => {\n      console.log(\"service.onopen...\");\n      service.send(produit.toLowerCase());\n    }\n\n    service.onclose = (event/*:CloseEvent*/) => {\n      console.log(\"service.onclose... \" + event.code);\n    };\n\n    service.onerror = () => {\n      window.alert(\"service.onerror...\");\n    };\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Router>\n          <SearchAppBar\n            placeholder=\"Nom du produit\"\n            onChange={this.handleChange}\n            value={this.produit}\n            name='produit'\n            onClick={this.clickSubmit}\n            title=\"Web Scraping\" />\n          <Switch>\n            <Route exact path='/' component={() => <HomePage data={this.state.data} loading={this.state.loading} />} />\n            <Route exact path='/CR' component = { () => <CRPage/>}/>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Figure.a2a67cb9.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Activity diagram 1.4e24be00.png\";"],"sourceRoot":""}